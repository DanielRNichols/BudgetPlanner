@page "/login"

@inject IAuthenticationRepository _authRepo;
@inject NavigationManager _nav;

<div class="card">
    <h3 class="card-title">Login</h3>
    @if (loginError)
    {
        <div class="alert alert-danger">
            <p>Login failed</p>
        </div>
    }
    <div class="card-body">
        <EditForm Model="Model" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="emailAddress">Email address</label>
                <InputText Id="emailAddress" class="form-control" @bind-Value="Model.EmailAddress" />
                <ValidationMessage For="@(() => Model.EmailAddress)" />
            </div>

            <div class="form-group">
                <label for="password">Password</label>
                <InputText Id="password" type="password" class="form-control" @bind-Value="Model.Password" />
                <ValidationMessage For="@(() => Model.Password)" />
            </div>

            <button type="submit" class="btn btn-primary btn-block">Login</button>
        </EditForm>
    </div>
</div>

@code {
    private UserLoginModel Model = new UserLoginModel();
    private bool loginError = false;

    private async Task HandleLogin()
    {
        loginError = false;
        var response = await _authRepo.Login(Model);
        if (response)
        {
            _nav.NavigateTo("/");
        }
        else
        {
            loginError = true;
        }

    }
}
